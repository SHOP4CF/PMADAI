version: "3.9"
services:
  mongo:
    image: mongo:3.6
    command: --nojournal
  orion:
    image: fiware/orion-ld
    links:
      - mongo
    ports:
      - "1026:1026"
    command: -dbhost mongo -lmtmp
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    build:
      context: ./kafka-docker
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_CREATE_TOPICS: "${KAFKA_CREATE_TOPICS}"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        ["CMD", "nc", "-vz", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 4
  data-collection:
    build:
      context: .
      dockerfile: ./data_collection/Dockerfile
    environment:
      ORACLE_DSN: ${ORACLE_DSN}
      ORACLE_PORT: ${ORACLE_PORT}
      ORACLE_USERNAME: ${ORACLE_USERNAME}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      ORACLE_ENCODING: '${ORACLE_ENCODING}'
      KAFKA_BOOTSTRAP_SERVER1: ${KAFKA_BOOTSTRAP_SERVER1}
      INFLUX_URL: ${INFLUX_URL}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_BUCKET: ${INFLUX_BUCKET}
      LOGGING_LEVEL: ${DATA_COLLECTION_LOGGING_LEVEL}
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV}
    depends_on:
      kafka:
        condition:
          service_healthy
  preprocessing:
    build:
      context: ./preprocessing
    environment:
      ORACLE_DSN: ${ORACLE_DSN}
      ORACLE_PORT: ${ORACLE_PORT}
      ORACLE_USERNAME: ${ORACLE_USERNAME}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      ORACLE_ENCODING: '${ORACLE_ENCODING}'
      KAFKA_BOOTSTRAP_SERVER1: ${KAFKA_BOOTSTRAP_SERVER1}
      INFLUX_URL: ${INFLUX_URL}
      INFLUX_TOKEN: ${INFLUX_TOKEN}
      INFLUX_ORG: ${INFLUX_ORG}
      INFLUX_BUCKET: ${INFLUX_BUCKET}
      LOGGING_LEVEL: ${PREPROCESSING_LOGGING_LEVEL}
      SLEEP_TIME: 3 # seconds
    depends_on:
      kafka:
        condition:
          service_healthy
  orion-kafka-bridge:
    build:
      context: ./orion-kafka-bridge
    command: python src/main.py
    environment:
      KAFKA_BOOTSTRAP_SERVER1: ${KAFKA_BOOTSTRAP_SERVER1}
      LOGGING_LEVEL: ${ORION_KAFKA_BRIDGE_LOGGING_LEVEL}
      ORION_SERVER: ${ORION_SERVER}
      ORION_KAFKA_BRIDGE: ${ORION_KAFKA_BRIDGE}
    depends_on:
      kafka:
        condition:
          service_healthy
  kafka-orion-alert:
    build:
      context: .
      dockerfile: ./kafka-orion-alert/Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVER1: ${KAFKA_BOOTSTRAP_SERVER1}
      LOGGING_LEVEL: ${KAFKA_ORION_ALERT_LOGGING_LEVEL}
      ORION_SERVER: ${ORION_SERVER}
      ORACLE_DSN: ${ORACLE_DSN}
      ORACLE_PORT: ${ORACLE_PORT}
      ORACLE_USERNAME: ${ORACLE_USERNAME}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      ORACLE_ENCODING: '${ORACLE_ENCODING}'
      DEPLOYMENT_ENV: ${DEPLOYMENT_ENV}
    depends_on:
      kafka:
        condition:
          service_healthy
  orion-load-simulator:
    build:
      context: ./orion-load-simulator
    environment:
      ORION_SERVER: ${ORION_SERVER}
      LOGGING_LEVEL: ${ORION_LOAD_SIMULATOR_LOGGING_LEVEL}
      ORION_KAFKA_BRIDGE: ${ORION_KAFKA_BRIDGE}
      METADATA_SLEEP_TIME_SECONDS: 3
      TRENDS_SLEEP_TIME_SECONDS: 0.1
      METADATA_START_SLEEP_TIME_SECONDS: 5
    depends_on:
      - "orion-kafka-bridge"
      - "data-collection"
      - "preprocessing"
#    volumes:
#      - ../prediction_data_raw_jun10-sep11/trends:/trends
#      - ../prediction_data_raw_jun10-sep11/Metadata_2020-06-10_2020-09-11.xlsx:/Metadata.xlsx
  prediction:
    build:
      context: ./prediction
    command: python src/main.py
    environment:
      LOGGING_LEVEL: ${PREDICTION_LOGGING_LEVEL}
  processing:
    build:
      context: ./processing
    environment:
      LOGGING_LEVEL: ${PROCESSING_LOGGING_LEVEL}
      PREDICTION_API_URL: ${PREDICTION_API_URL}
      KAFKA_BOOTSTRAP_SERVER1: ${KAFKA_BOOTSTRAP_SERVER1}
      BACKEND_API_URL: ${BACKEND_API_URL}
    depends_on:
      kafka:
        condition:
          service_healthy
networks:
  default:
    external:
      name: pmadai_default
